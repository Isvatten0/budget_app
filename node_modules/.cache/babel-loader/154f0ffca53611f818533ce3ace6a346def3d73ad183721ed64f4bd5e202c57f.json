{"ast":null,"code":"var _jsxFileName = \"/workspace/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport function ThemeProvider({\n  children\n}) {\n  _s();\n  const [theme, setThemeState] = useState(() => {\n    // Check localStorage first, then system preference\n    const saved = localStorage.getItem('theme');\n    if (saved) return saved;\n    if (window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light';\n    }\n    return 'dark';\n  });\n\n  // Function to load theme from database\n  const loadThemeFromDatabase = async () => {\n    try {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (user) {\n        const {\n          data: settings\n        } = await supabase.from('user_settings').select('theme').eq('user_id', user.id).single();\n        if (settings !== null && settings !== void 0 && settings.theme && settings.theme !== theme) {\n          setThemeState(settings.theme);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading theme from database:', error);\n    }\n  };\n\n  // Load theme from database on mount\n  useEffect(() => {\n    loadThemeFromDatabase();\n  }, []);\n  useEffect(() => {\n    // Update document class and localStorage\n    const root = document.documentElement;\n    if (theme === 'light') {\n      root.classList.add('light');\n    } else {\n      root.classList.remove('light');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setThemeState(prev => prev === 'dark' ? 'light' : 'dark');\n  };\n  const setTheme = newTheme => {\n    setThemeState(newTheme);\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeProvider, \"YgGxv2sAnOWWT9UcD1aDwbiYBAo=\");\n_c = ThemeProvider;\nexport function useTheme() {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setThemeState","saved","localStorage","getItem","window","matchMedia","matches","loadThemeFromDatabase","data","user","auth","getUser","settings","from","select","eq","id","single","error","console","root","document","documentElement","classList","add","remove","setItem","toggleTheme","prev","setTheme","newTheme","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/workspace/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\nimport { supabase } from '../lib/supabase'\n\ntype Theme = 'dark' | 'light'\n\ninterface ThemeContextType {\n  theme: Theme\n  toggleTheme: () => void\n  setTheme: (theme: Theme) => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>(() => {\n    // Check localStorage first, then system preference\n    const saved = localStorage.getItem('theme') as Theme\n    if (saved) return saved\n    \n    if (window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light'\n    }\n    return 'dark'\n  })\n\n  // Function to load theme from database\n  const loadThemeFromDatabase = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (user) {\n        const { data: settings } = await supabase\n          .from('user_settings')\n          .select('theme')\n          .eq('user_id', user.id)\n          .single()\n        \n        if (settings?.theme && settings.theme !== theme) {\n          setThemeState(settings.theme)\n        }\n      }\n    } catch (error) {\n      console.error('Error loading theme from database:', error)\n    }\n  }\n\n  // Load theme from database on mount\n  useEffect(() => {\n    loadThemeFromDatabase()\n  }, [])\n\n  useEffect(() => {\n    // Update document class and localStorage\n    const root = document.documentElement\n    if (theme === 'light') {\n      root.classList.add('light')\n    } else {\n      root.classList.remove('light')\n    }\n    localStorage.setItem('theme', theme)\n  }, [theme])\n\n  const toggleTheme = () => {\n    setThemeState(prev => prev === 'dark' ? 'light' : 'dark')\n  }\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme)\n  }\n\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme,\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext)\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}