{"ast":null,"code":"import { addDays, addWeeks, addMonths, format, isAfter, isBefore, startOfDay } from 'date-fns';\nexport function calculateNextPayDate(lastPayDate, frequency, customDays) {\n  switch (frequency) {\n    case 'weekly':\n      return addWeeks(lastPayDate, 1);\n    case 'biweekly':\n      return addWeeks(lastPayDate, 2);\n    case 'monthly':\n      return addMonths(lastPayDate, 1);\n    case 'custom':\n      return addDays(lastPayDate, customDays || 14);\n    default:\n      return addWeeks(lastPayDate, 2);\n  }\n}\nexport function getPayPeriodDays(frequency, customDays) {\n  switch (frequency) {\n    case 'weekly':\n      return 7;\n    case 'biweekly':\n      return 14;\n    case 'monthly':\n      return 30;\n    case 'custom':\n      return customDays || 14;\n    default:\n      return 14;\n  }\n}\nexport function calculatePayPeriods(lastPayDate, frequency, customDays, periods = 3) {\n  const payPeriods = [];\n  let currentDate = new Date(lastPayDate);\n  for (let i = 0; i < periods; i++) {\n    const start = new Date(currentDate);\n    const end = calculateNextPayDate(currentDate, frequency, customDays);\n    payPeriods.push({\n      start,\n      end,\n      income: 0,\n      expenses: 0,\n      net: 0\n    });\n    currentDate = end;\n  }\n  return payPeriods;\n}\nexport function calculateUpcomingBills(expenses, currentDate, nextPayDate, payPeriodDays) {\n  const upcomingBills = [];\n  const currentCycleEnd = addDays(currentDate, payPeriodDays);\n  expenses.forEach(expense => {\n    let dueDate = new Date(expense.due_date);\n\n    // If the due date has passed, calculate the next occurrence\n    while (isBefore(dueDate, currentDate)) {\n      dueDate = calculateNextPayDate(dueDate, expense.frequency, expense.custom_days);\n    }\n    const isInCurrentCycle = isBefore(dueDate, currentCycleEnd);\n    const needsReservation = isAfter(dueDate, nextPayDate);\n    upcomingBills.push({\n      name: expense.name,\n      amount: expense.amount,\n      dueDate,\n      isInCurrentCycle,\n      needsReservation\n    });\n  });\n  return upcomingBills.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n}\nexport function calculateBudgetForecast(currentBalance, income, expenses, goals, settings, transactions = []) {\n  const currentDate = startOfDay(new Date());\n  const lastPayDate = new Date(settings.last_pay_date);\n  const nextPayDate = calculateNextPayDate(lastPayDate, settings.pay_frequency, settings.custom_days);\n  const payPeriodDays = getPayPeriodDays(settings.pay_frequency, settings.custom_days);\n\n  // Calculate upcoming bills\n  const upcomingBills = calculateUpcomingBills(expenses, currentDate, nextPayDate, payPeriodDays);\n\n  // Calculate total income for current pay period\n  const currentPeriodIncome = income.reduce((total, inc) => {\n    let nextDate = new Date(inc.next_date);\n    while (isBefore(nextDate, currentDate)) {\n      nextDate = calculateNextPayDate(nextDate, inc.frequency, inc.custom_days);\n    }\n    if (isBefore(nextDate, addDays(currentDate, payPeriodDays))) {\n      return total + inc.amount;\n    }\n    return total;\n  }, 0);\n\n  // Calculate bills in current pay period\n  const currentPeriodBills = upcomingBills.filter(bill => bill.isInCurrentCycle).reduce((total, bill) => total + bill.amount, 0);\n\n  // Calculate bills that need reservation (beyond current pay period)\n  const reservedForBills = upcomingBills.filter(bill => bill.needsReservation).reduce((total, bill) => total + bill.amount, 0);\n\n  // Calculate discretionary amount\n  const discretionary = currentBalance + currentPeriodIncome - currentPeriodBills - reservedForBills;\n\n  // Calculate goals progress\n  const goalsProgress = goals.map(goal => {\n    const monthlyContribution = discretionary * 0.1; // Suggest 10% of discretionary\n    const progress = goal.current_amount / goal.target_amount * 100;\n    let onTrack = true;\n    if (goal.deadline) {\n      const deadline = new Date(goal.deadline);\n      const monthsUntilDeadline = Math.max(1, (deadline.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24 * 30));\n      const requiredMonthly = (goal.target_amount - goal.current_amount) / monthsUntilDeadline;\n      onTrack = monthlyContribution >= requiredMonthly;\n    }\n    return {\n      goal,\n      progress,\n      monthlyContribution,\n      onTrack\n    };\n  });\n  return {\n    currentBalance,\n    reservedForBills,\n    discretionary: Math.max(0, discretionary),\n    nextPayDate,\n    upcomingBills,\n    goalsProgress\n  };\n}\nexport function categorizeTransaction(description) {\n  const lowerDesc = description.toLowerCase();\n\n  // Food categories\n  if (lowerDesc.includes('grocery') || lowerDesc.includes('food') || lowerDesc.includes('restaurant') || lowerDesc.includes('coffee') || lowerDesc.includes('lunch') || lowerDesc.includes('dinner')) {\n    return 'Food & Dining';\n  }\n\n  // Transportation\n  if (lowerDesc.includes('gas') || lowerDesc.includes('fuel') || lowerDesc.includes('uber') || lowerDesc.includes('lyft') || lowerDesc.includes('parking') || lowerDesc.includes('transit')) {\n    return 'Transportation';\n  }\n\n  // Entertainment\n  if (lowerDesc.includes('movie') || lowerDesc.includes('netflix') || lowerDesc.includes('spotify') || lowerDesc.includes('game') || lowerDesc.includes('concert') || lowerDesc.includes('bar')) {\n    return 'Entertainment';\n  }\n\n  // Shopping\n  if (lowerDesc.includes('amazon') || lowerDesc.includes('walmart') || lowerDesc.includes('target') || lowerDesc.includes('clothing') || lowerDesc.includes('shirt') || lowerDesc.includes('shoes')) {\n    return 'Shopping';\n  }\n\n  // Bills\n  if (lowerDesc.includes('electric') || lowerDesc.includes('water') || lowerDesc.includes('internet') || lowerDesc.includes('phone') || lowerDesc.includes('rent') || lowerDesc.includes('mortgage')) {\n    return 'Bills & Utilities';\n  }\n\n  // Health\n  if (lowerDesc.includes('doctor') || lowerDesc.includes('pharmacy') || lowerDesc.includes('medical') || lowerDesc.includes('dental') || lowerDesc.includes('vision')) {\n    return 'Healthcare';\n  }\n\n  // Income\n  if (lowerDesc.includes('salary') || lowerDesc.includes('payroll') || lowerDesc.includes('deposit') || lowerDesc.includes('refund') || lowerDesc.includes('bonus')) {\n    return 'Income';\n  }\n  return 'Other';\n}\nexport function formatCurrency(amount, currency = 'USD') {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency\n  }).format(amount);\n}\nexport function formatDate(date) {\n  return format(date, 'MMM dd, yyyy');\n}\nexport function formatRelativeDate(date) {\n  const now = new Date();\n  const diffTime = date.getTime() - now.getTime();\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  if (diffDays === 0) return 'Today';\n  if (diffDays === 1) return 'Tomorrow';\n  if (diffDays === -1) return 'Yesterday';\n  if (diffDays > 0) return `In ${diffDays} days`;\n  return `${Math.abs(diffDays)} days ago`;\n}","map":{"version":3,"names":["addDays","addWeeks","addMonths","format","isAfter","isBefore","startOfDay","calculateNextPayDate","lastPayDate","frequency","customDays","getPayPeriodDays","calculatePayPeriods","periods","payPeriods","currentDate","Date","i","start","end","push","income","expenses","net","calculateUpcomingBills","nextPayDate","payPeriodDays","upcomingBills","currentCycleEnd","forEach","expense","dueDate","due_date","custom_days","isInCurrentCycle","needsReservation","name","amount","sort","a","b","getTime","calculateBudgetForecast","currentBalance","goals","settings","transactions","last_pay_date","pay_frequency","currentPeriodIncome","reduce","total","inc","nextDate","next_date","currentPeriodBills","filter","bill","reservedForBills","discretionary","goalsProgress","map","goal","monthlyContribution","progress","current_amount","target_amount","onTrack","deadline","monthsUntilDeadline","Math","max","requiredMonthly","categorizeTransaction","description","lowerDesc","toLowerCase","includes","formatCurrency","currency","Intl","NumberFormat","style","formatDate","date","formatRelativeDate","now","diffTime","diffDays","ceil","abs"],"sources":["/workspace/src/lib/budget-utils.ts"],"sourcesContent":["import { addDays, addWeeks, addMonths, format, isAfter, isBefore, startOfDay } from 'date-fns'\nimport { RecurringIncome, RecurringExpense, Goal, Transaction, UserSettings } from './supabase'\n\nexport interface BudgetForecast {\n  currentBalance: number\n  reservedForBills: number\n  discretionary: number\n  nextPayDate: Date\n  upcomingBills: UpcomingBill[]\n  goalsProgress: GoalProgress[]\n}\n\nexport interface UpcomingBill {\n  name: string\n  amount: number\n  dueDate: Date\n  isInCurrentCycle: boolean\n  needsReservation: boolean\n}\n\nexport interface GoalProgress {\n  goal: Goal\n  progress: number\n  monthlyContribution: number\n  onTrack: boolean\n}\n\nexport interface PayPeriod {\n  start: Date\n  end: Date\n  income: number\n  expenses: number\n  net: number\n}\n\nexport function calculateNextPayDate(lastPayDate: Date, frequency: string, customDays?: number): Date {\n  switch (frequency) {\n    case 'weekly':\n      return addWeeks(lastPayDate, 1)\n    case 'biweekly':\n      return addWeeks(lastPayDate, 2)\n    case 'monthly':\n      return addMonths(lastPayDate, 1)\n    case 'custom':\n      return addDays(lastPayDate, customDays || 14)\n    default:\n      return addWeeks(lastPayDate, 2)\n  }\n}\n\nexport function getPayPeriodDays(frequency: string, customDays?: number): number {\n  switch (frequency) {\n    case 'weekly':\n      return 7\n    case 'biweekly':\n      return 14\n    case 'monthly':\n      return 30\n    case 'custom':\n      return customDays || 14\n    default:\n      return 14\n  }\n}\n\nexport function calculatePayPeriods(\n  lastPayDate: Date,\n  frequency: string,\n  customDays?: number,\n  periods: number = 3\n): PayPeriod[] {\n  const payPeriods: PayPeriod[] = []\n  let currentDate = new Date(lastPayDate)\n\n  for (let i = 0; i < periods; i++) {\n    const start = new Date(currentDate)\n    const end = calculateNextPayDate(currentDate, frequency, customDays)\n    \n    payPeriods.push({\n      start,\n      end,\n      income: 0,\n      expenses: 0,\n      net: 0\n    })\n    \n    currentDate = end\n  }\n\n  return payPeriods\n}\n\nexport function calculateUpcomingBills(\n  expenses: RecurringExpense[],\n  currentDate: Date,\n  nextPayDate: Date,\n  payPeriodDays: number\n): UpcomingBill[] {\n  const upcomingBills: UpcomingBill[] = []\n  const currentCycleEnd = addDays(currentDate, payPeriodDays)\n\n  expenses.forEach(expense => {\n    let dueDate = new Date(expense.due_date)\n    \n    // If the due date has passed, calculate the next occurrence\n    while (isBefore(dueDate, currentDate)) {\n      dueDate = calculateNextPayDate(dueDate, expense.frequency, expense.custom_days)\n    }\n\n    const isInCurrentCycle = isBefore(dueDate, currentCycleEnd)\n    const needsReservation = isAfter(dueDate, nextPayDate)\n\n    upcomingBills.push({\n      name: expense.name,\n      amount: expense.amount,\n      dueDate,\n      isInCurrentCycle,\n      needsReservation\n    })\n  })\n\n  return upcomingBills.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime())\n}\n\nexport function calculateBudgetForecast(\n  currentBalance: number,\n  income: RecurringIncome[],\n  expenses: RecurringExpense[],\n  goals: Goal[],\n  settings: UserSettings,\n  transactions: Transaction[] = []\n): BudgetForecast {\n  const currentDate = startOfDay(new Date())\n  const lastPayDate = new Date(settings.last_pay_date)\n  const nextPayDate = calculateNextPayDate(lastPayDate, settings.pay_frequency, settings.custom_days)\n  const payPeriodDays = getPayPeriodDays(settings.pay_frequency, settings.custom_days)\n\n  // Calculate upcoming bills\n  const upcomingBills = calculateUpcomingBills(expenses, currentDate, nextPayDate, payPeriodDays)\n  \n  // Calculate total income for current pay period\n  const currentPeriodIncome = income.reduce((total, inc) => {\n    let nextDate = new Date(inc.next_date)\n    while (isBefore(nextDate, currentDate)) {\n      nextDate = calculateNextPayDate(nextDate, inc.frequency, inc.custom_days)\n    }\n    \n    if (isBefore(nextDate, addDays(currentDate, payPeriodDays))) {\n      return total + inc.amount\n    }\n    return total\n  }, 0)\n\n  // Calculate bills in current pay period\n  const currentPeriodBills = upcomingBills\n    .filter(bill => bill.isInCurrentCycle)\n    .reduce((total, bill) => total + bill.amount, 0)\n\n  // Calculate bills that need reservation (beyond current pay period)\n  const reservedForBills = upcomingBills\n    .filter(bill => bill.needsReservation)\n    .reduce((total, bill) => total + bill.amount, 0)\n\n  // Calculate discretionary amount\n  const discretionary = currentBalance + currentPeriodIncome - currentPeriodBills - reservedForBills\n\n  // Calculate goals progress\n  const goalsProgress = goals.map(goal => {\n    const monthlyContribution = discretionary * 0.1 // Suggest 10% of discretionary\n    const progress = (goal.current_amount / goal.target_amount) * 100\n    \n    let onTrack = true\n    if (goal.deadline) {\n      const deadline = new Date(goal.deadline)\n      const monthsUntilDeadline = Math.max(1, (deadline.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24 * 30))\n      const requiredMonthly = (goal.target_amount - goal.current_amount) / monthsUntilDeadline\n      onTrack = monthlyContribution >= requiredMonthly\n    }\n\n    return {\n      goal,\n      progress,\n      monthlyContribution,\n      onTrack\n    }\n  })\n\n  return {\n    currentBalance,\n    reservedForBills,\n    discretionary: Math.max(0, discretionary),\n    nextPayDate,\n    upcomingBills,\n    goalsProgress\n  }\n}\n\nexport function categorizeTransaction(description: string): string {\n  const lowerDesc = description.toLowerCase()\n  \n  // Food categories\n  if (lowerDesc.includes('grocery') || lowerDesc.includes('food') || lowerDesc.includes('restaurant') || \n      lowerDesc.includes('coffee') || lowerDesc.includes('lunch') || lowerDesc.includes('dinner')) {\n    return 'Food & Dining'\n  }\n  \n  // Transportation\n  if (lowerDesc.includes('gas') || lowerDesc.includes('fuel') || lowerDesc.includes('uber') || \n      lowerDesc.includes('lyft') || lowerDesc.includes('parking') || lowerDesc.includes('transit')) {\n    return 'Transportation'\n  }\n  \n  // Entertainment\n  if (lowerDesc.includes('movie') || lowerDesc.includes('netflix') || lowerDesc.includes('spotify') || \n      lowerDesc.includes('game') || lowerDesc.includes('concert') || lowerDesc.includes('bar')) {\n    return 'Entertainment'\n  }\n  \n  // Shopping\n  if (lowerDesc.includes('amazon') || lowerDesc.includes('walmart') || lowerDesc.includes('target') || \n      lowerDesc.includes('clothing') || lowerDesc.includes('shirt') || lowerDesc.includes('shoes')) {\n    return 'Shopping'\n  }\n  \n  // Bills\n  if (lowerDesc.includes('electric') || lowerDesc.includes('water') || lowerDesc.includes('internet') || \n      lowerDesc.includes('phone') || lowerDesc.includes('rent') || lowerDesc.includes('mortgage')) {\n    return 'Bills & Utilities'\n  }\n  \n  // Health\n  if (lowerDesc.includes('doctor') || lowerDesc.includes('pharmacy') || lowerDesc.includes('medical') || \n      lowerDesc.includes('dental') || lowerDesc.includes('vision')) {\n    return 'Healthcare'\n  }\n  \n  // Income\n  if (lowerDesc.includes('salary') || lowerDesc.includes('payroll') || lowerDesc.includes('deposit') || \n      lowerDesc.includes('refund') || lowerDesc.includes('bonus')) {\n    return 'Income'\n  }\n  \n  return 'Other'\n}\n\nexport function formatCurrency(amount: number, currency: string = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n  }).format(amount)\n}\n\nexport function formatDate(date: Date): string {\n  return format(date, 'MMM dd, yyyy')\n}\n\nexport function formatRelativeDate(date: Date): string {\n  const now = new Date()\n  const diffTime = date.getTime() - now.getTime()\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n  \n  if (diffDays === 0) return 'Today'\n  if (diffDays === 1) return 'Tomorrow'\n  if (diffDays === -1) return 'Yesterday'\n  if (diffDays > 0) return `In ${diffDays} days`\n  return `${Math.abs(diffDays)} days ago`\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}