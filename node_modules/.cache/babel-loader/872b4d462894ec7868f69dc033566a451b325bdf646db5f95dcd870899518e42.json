{"ast":null,"code":"import{addDays,addWeeks,addMonths,format,isAfter,isBefore,startOfDay}from'date-fns';export function calculateNextPayDate(lastPayDate,frequency,customDays){switch(frequency){case'weekly':return addWeeks(lastPayDate,1);case'biweekly':return addWeeks(lastPayDate,2);case'monthly':return addMonths(lastPayDate,1);case'custom':return addDays(lastPayDate,customDays||14);default:return addWeeks(lastPayDate,2);}}export function getPayPeriodDays(frequency,customDays){switch(frequency){case'weekly':return 7;case'biweekly':return 14;case'monthly':return 30;case'custom':return customDays||14;default:return 14;}}export function calculatePayPeriods(lastPayDate,frequency,customDays){let periods=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;const payPeriods=[];let currentDate=new Date(lastPayDate);for(let i=0;i<periods;i++){const start=new Date(currentDate);const end=calculateNextPayDate(currentDate,frequency,customDays);payPeriods.push({start,end,income:0,expenses:0,net:0});currentDate=end;}return payPeriods;}export function calculateUpcomingBills(expenses,currentDate,nextPayDate,payPeriodDays){const upcomingBills=[];const currentCycleEnd=addDays(currentDate,payPeriodDays);expenses.forEach(expense=>{let dueDate=new Date(expense.due_date);// If the due date has passed, calculate the next occurrence\nwhile(isBefore(dueDate,currentDate)){dueDate=calculateNextPayDate(dueDate,expense.frequency,expense.custom_days);}const isInCurrentCycle=isBefore(dueDate,currentCycleEnd);const needsReservation=isAfter(dueDate,nextPayDate);upcomingBills.push({name:expense.name,amount:expense.amount,dueDate,isInCurrentCycle,needsReservation});});return upcomingBills.sort((a,b)=>a.dueDate.getTime()-b.dueDate.getTime());}export function calculateBudgetForecast(currentBalance,income,expenses,goals,settings){let transactions=arguments.length>5&&arguments[5]!==undefined?arguments[5]:[];const currentDate=startOfDay(new Date());const lastPayDate=new Date(settings.last_pay_date);const nextPayDate=calculateNextPayDate(lastPayDate,settings.pay_frequency,settings.custom_days);const payPeriodDays=getPayPeriodDays(settings.pay_frequency,settings.custom_days);// Calculate upcoming bills\nconst upcomingBills=calculateUpcomingBills(expenses,currentDate,nextPayDate,payPeriodDays);// Calculate total income for current pay period\nconst currentPeriodIncome=income.reduce((total,inc)=>{let nextDate=new Date(inc.next_date);while(isBefore(nextDate,currentDate)){nextDate=calculateNextPayDate(nextDate,inc.frequency,inc.custom_days);}if(isBefore(nextDate,addDays(currentDate,payPeriodDays))){return total+inc.amount;}return total;},0);// Calculate bills in current pay period\nconst currentPeriodBills=upcomingBills.filter(bill=>bill.isInCurrentCycle).reduce((total,bill)=>total+bill.amount,0);// Calculate bills that need reservation (beyond current pay period)\nconst reservedForBills=upcomingBills.filter(bill=>bill.needsReservation).reduce((total,bill)=>total+bill.amount,0);// Calculate discretionary amount\nconst discretionary=currentBalance+currentPeriodIncome-currentPeriodBills-reservedForBills;// Calculate goals progress\nconst goalsProgress=goals.map(goal=>{const monthlyContribution=discretionary*0.1;// Suggest 10% of discretionary\nconst progress=goal.current_amount/goal.target_amount*100;let onTrack=true;if(goal.deadline){const deadline=new Date(goal.deadline);const monthsUntilDeadline=Math.max(1,(deadline.getTime()-currentDate.getTime())/(1000*60*60*24*30));const requiredMonthly=(goal.target_amount-goal.current_amount)/monthsUntilDeadline;onTrack=monthlyContribution>=requiredMonthly;}return{goal,progress,monthlyContribution,onTrack};});return{currentBalance,reservedForBills,discretionary:Math.max(0,discretionary),nextPayDate,upcomingBills,goalsProgress};}export function categorizeTransaction(description){const lowerDesc=description.toLowerCase();// Food categories\nif(lowerDesc.includes('grocery')||lowerDesc.includes('food')||lowerDesc.includes('restaurant')||lowerDesc.includes('coffee')||lowerDesc.includes('lunch')||lowerDesc.includes('dinner')){return'Food & Dining';}// Transportation\nif(lowerDesc.includes('gas')||lowerDesc.includes('fuel')||lowerDesc.includes('uber')||lowerDesc.includes('lyft')||lowerDesc.includes('parking')||lowerDesc.includes('transit')){return'Transportation';}// Entertainment\nif(lowerDesc.includes('movie')||lowerDesc.includes('netflix')||lowerDesc.includes('spotify')||lowerDesc.includes('game')||lowerDesc.includes('concert')||lowerDesc.includes('bar')){return'Entertainment';}// Shopping\nif(lowerDesc.includes('amazon')||lowerDesc.includes('walmart')||lowerDesc.includes('target')||lowerDesc.includes('clothing')||lowerDesc.includes('shirt')||lowerDesc.includes('shoes')){return'Shopping';}// Bills\nif(lowerDesc.includes('electric')||lowerDesc.includes('water')||lowerDesc.includes('internet')||lowerDesc.includes('phone')||lowerDesc.includes('rent')||lowerDesc.includes('mortgage')){return'Bills & Utilities';}// Health\nif(lowerDesc.includes('doctor')||lowerDesc.includes('pharmacy')||lowerDesc.includes('medical')||lowerDesc.includes('dental')||lowerDesc.includes('vision')){return'Healthcare';}// Income\nif(lowerDesc.includes('salary')||lowerDesc.includes('payroll')||lowerDesc.includes('deposit')||lowerDesc.includes('refund')||lowerDesc.includes('bonus')){return'Income';}return'Other';}export function formatCurrency(amount){let currency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'USD';return new Intl.NumberFormat('en-US',{style:'currency',currency:currency}).format(amount);}export function formatDate(date){return format(date,'MMM dd, yyyy');}export function formatRelativeDate(date){const now=new Date();const diffTime=date.getTime()-now.getTime();const diffDays=Math.ceil(diffTime/(1000*60*60*24));if(diffDays===0)return'Today';if(diffDays===1)return'Tomorrow';if(diffDays===-1)return'Yesterday';if(diffDays>0)return`In ${diffDays} days`;return`${Math.abs(diffDays)} days ago`;}","map":{"version":3,"names":["addDays","addWeeks","addMonths","format","isAfter","isBefore","startOfDay","calculateNextPayDate","lastPayDate","frequency","customDays","getPayPeriodDays","calculatePayPeriods","periods","arguments","length","undefined","payPeriods","currentDate","Date","i","start","end","push","income","expenses","net","calculateUpcomingBills","nextPayDate","payPeriodDays","upcomingBills","currentCycleEnd","forEach","expense","dueDate","due_date","custom_days","isInCurrentCycle","needsReservation","name","amount","sort","a","b","getTime","calculateBudgetForecast","currentBalance","goals","settings","transactions","last_pay_date","pay_frequency","currentPeriodIncome","reduce","total","inc","nextDate","next_date","currentPeriodBills","filter","bill","reservedForBills","discretionary","goalsProgress","map","goal","monthlyContribution","progress","current_amount","target_amount","onTrack","deadline","monthsUntilDeadline","Math","max","requiredMonthly","categorizeTransaction","description","lowerDesc","toLowerCase","includes","formatCurrency","currency","Intl","NumberFormat","style","formatDate","date","formatRelativeDate","now","diffTime","diffDays","ceil","abs"],"sources":["/workspace/src/lib/budget-utils.ts"],"sourcesContent":["import { addDays, addWeeks, addMonths, format, isAfter, isBefore, startOfDay } from 'date-fns'\nimport { RecurringIncome, RecurringExpense, Goal, Transaction, UserSettings } from './supabase'\n\nexport interface BudgetForecast {\n  currentBalance: number\n  reservedForBills: number\n  discretionary: number\n  nextPayDate: Date\n  upcomingBills: UpcomingBill[]\n  goalsProgress: GoalProgress[]\n}\n\nexport interface UpcomingBill {\n  name: string\n  amount: number\n  dueDate: Date\n  isInCurrentCycle: boolean\n  needsReservation: boolean\n}\n\nexport interface GoalProgress {\n  goal: Goal\n  progress: number\n  monthlyContribution: number\n  onTrack: boolean\n}\n\nexport interface PayPeriod {\n  start: Date\n  end: Date\n  income: number\n  expenses: number\n  net: number\n}\n\nexport function calculateNextPayDate(lastPayDate: Date, frequency: string, customDays?: number): Date {\n  switch (frequency) {\n    case 'weekly':\n      return addWeeks(lastPayDate, 1)\n    case 'biweekly':\n      return addWeeks(lastPayDate, 2)\n    case 'monthly':\n      return addMonths(lastPayDate, 1)\n    case 'custom':\n      return addDays(lastPayDate, customDays || 14)\n    default:\n      return addWeeks(lastPayDate, 2)\n  }\n}\n\nexport function getPayPeriodDays(frequency: string, customDays?: number): number {\n  switch (frequency) {\n    case 'weekly':\n      return 7\n    case 'biweekly':\n      return 14\n    case 'monthly':\n      return 30\n    case 'custom':\n      return customDays || 14\n    default:\n      return 14\n  }\n}\n\nexport function calculatePayPeriods(\n  lastPayDate: Date,\n  frequency: string,\n  customDays?: number,\n  periods: number = 3\n): PayPeriod[] {\n  const payPeriods: PayPeriod[] = []\n  let currentDate = new Date(lastPayDate)\n\n  for (let i = 0; i < periods; i++) {\n    const start = new Date(currentDate)\n    const end = calculateNextPayDate(currentDate, frequency, customDays)\n    \n    payPeriods.push({\n      start,\n      end,\n      income: 0,\n      expenses: 0,\n      net: 0\n    })\n    \n    currentDate = end\n  }\n\n  return payPeriods\n}\n\nexport function calculateUpcomingBills(\n  expenses: RecurringExpense[],\n  currentDate: Date,\n  nextPayDate: Date,\n  payPeriodDays: number\n): UpcomingBill[] {\n  const upcomingBills: UpcomingBill[] = []\n  const currentCycleEnd = addDays(currentDate, payPeriodDays)\n\n  expenses.forEach(expense => {\n    let dueDate = new Date(expense.due_date)\n    \n    // If the due date has passed, calculate the next occurrence\n    while (isBefore(dueDate, currentDate)) {\n      dueDate = calculateNextPayDate(dueDate, expense.frequency, expense.custom_days)\n    }\n\n    const isInCurrentCycle = isBefore(dueDate, currentCycleEnd)\n    const needsReservation = isAfter(dueDate, nextPayDate)\n\n    upcomingBills.push({\n      name: expense.name,\n      amount: expense.amount,\n      dueDate,\n      isInCurrentCycle,\n      needsReservation\n    })\n  })\n\n  return upcomingBills.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime())\n}\n\nexport function calculateBudgetForecast(\n  currentBalance: number,\n  income: RecurringIncome[],\n  expenses: RecurringExpense[],\n  goals: Goal[],\n  settings: UserSettings,\n  transactions: Transaction[] = []\n): BudgetForecast {\n  const currentDate = startOfDay(new Date())\n  const lastPayDate = new Date(settings.last_pay_date)\n  const nextPayDate = calculateNextPayDate(lastPayDate, settings.pay_frequency, settings.custom_days)\n  const payPeriodDays = getPayPeriodDays(settings.pay_frequency, settings.custom_days)\n\n  // Calculate upcoming bills\n  const upcomingBills = calculateUpcomingBills(expenses, currentDate, nextPayDate, payPeriodDays)\n  \n  // Calculate total income for current pay period\n  const currentPeriodIncome = income.reduce((total, inc) => {\n    let nextDate = new Date(inc.next_date)\n    while (isBefore(nextDate, currentDate)) {\n      nextDate = calculateNextPayDate(nextDate, inc.frequency, inc.custom_days)\n    }\n    \n    if (isBefore(nextDate, addDays(currentDate, payPeriodDays))) {\n      return total + inc.amount\n    }\n    return total\n  }, 0)\n\n  // Calculate bills in current pay period\n  const currentPeriodBills = upcomingBills\n    .filter(bill => bill.isInCurrentCycle)\n    .reduce((total, bill) => total + bill.amount, 0)\n\n  // Calculate bills that need reservation (beyond current pay period)\n  const reservedForBills = upcomingBills\n    .filter(bill => bill.needsReservation)\n    .reduce((total, bill) => total + bill.amount, 0)\n\n  // Calculate discretionary amount\n  const discretionary = currentBalance + currentPeriodIncome - currentPeriodBills - reservedForBills\n\n  // Calculate goals progress\n  const goalsProgress = goals.map(goal => {\n    const monthlyContribution = discretionary * 0.1 // Suggest 10% of discretionary\n    const progress = (goal.current_amount / goal.target_amount) * 100\n    \n    let onTrack = true\n    if (goal.deadline) {\n      const deadline = new Date(goal.deadline)\n      const monthsUntilDeadline = Math.max(1, (deadline.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24 * 30))\n      const requiredMonthly = (goal.target_amount - goal.current_amount) / monthsUntilDeadline\n      onTrack = monthlyContribution >= requiredMonthly\n    }\n\n    return {\n      goal,\n      progress,\n      monthlyContribution,\n      onTrack\n    }\n  })\n\n  return {\n    currentBalance,\n    reservedForBills,\n    discretionary: Math.max(0, discretionary),\n    nextPayDate,\n    upcomingBills,\n    goalsProgress\n  }\n}\n\nexport function categorizeTransaction(description: string): string {\n  const lowerDesc = description.toLowerCase()\n  \n  // Food categories\n  if (lowerDesc.includes('grocery') || lowerDesc.includes('food') || lowerDesc.includes('restaurant') || \n      lowerDesc.includes('coffee') || lowerDesc.includes('lunch') || lowerDesc.includes('dinner')) {\n    return 'Food & Dining'\n  }\n  \n  // Transportation\n  if (lowerDesc.includes('gas') || lowerDesc.includes('fuel') || lowerDesc.includes('uber') || \n      lowerDesc.includes('lyft') || lowerDesc.includes('parking') || lowerDesc.includes('transit')) {\n    return 'Transportation'\n  }\n  \n  // Entertainment\n  if (lowerDesc.includes('movie') || lowerDesc.includes('netflix') || lowerDesc.includes('spotify') || \n      lowerDesc.includes('game') || lowerDesc.includes('concert') || lowerDesc.includes('bar')) {\n    return 'Entertainment'\n  }\n  \n  // Shopping\n  if (lowerDesc.includes('amazon') || lowerDesc.includes('walmart') || lowerDesc.includes('target') || \n      lowerDesc.includes('clothing') || lowerDesc.includes('shirt') || lowerDesc.includes('shoes')) {\n    return 'Shopping'\n  }\n  \n  // Bills\n  if (lowerDesc.includes('electric') || lowerDesc.includes('water') || lowerDesc.includes('internet') || \n      lowerDesc.includes('phone') || lowerDesc.includes('rent') || lowerDesc.includes('mortgage')) {\n    return 'Bills & Utilities'\n  }\n  \n  // Health\n  if (lowerDesc.includes('doctor') || lowerDesc.includes('pharmacy') || lowerDesc.includes('medical') || \n      lowerDesc.includes('dental') || lowerDesc.includes('vision')) {\n    return 'Healthcare'\n  }\n  \n  // Income\n  if (lowerDesc.includes('salary') || lowerDesc.includes('payroll') || lowerDesc.includes('deposit') || \n      lowerDesc.includes('refund') || lowerDesc.includes('bonus')) {\n    return 'Income'\n  }\n  \n  return 'Other'\n}\n\nexport function formatCurrency(amount: number, currency: string = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n  }).format(amount)\n}\n\nexport function formatDate(date: Date): string {\n  return format(date, 'MMM dd, yyyy')\n}\n\nexport function formatRelativeDate(date: Date): string {\n  const now = new Date()\n  const diffTime = date.getTime() - now.getTime()\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n  \n  if (diffDays === 0) return 'Today'\n  if (diffDays === 1) return 'Tomorrow'\n  if (diffDays === -1) return 'Yesterday'\n  if (diffDays > 0) return `In ${diffDays} days`\n  return `${Math.abs(diffDays)} days ago`\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}